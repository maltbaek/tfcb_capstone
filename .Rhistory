knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(Amelia)
library(impute)
library(tidyverse)
BiocManager::install("impute")
pcbilDataRaw <- read.csv(file = "/Users/jmalt/Desktop/tfcb_capstone/data/pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" ) %>%
print()
pcbilDataRaw <- read.csv(file = "/Users/jmalt/Desktop/tfcb_captsone/data/pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" ) %>%
print()
pcbilDataRaw <- read.csv(file = "C:/Users/jmalt/Desktop/tfcb_captsone/data/pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" ) %>%
print()
pcbilDataRaw <- read.csv(file = "C:/Users/jmalt/Desktop/tfcb_captsone/data/pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" ) %>%
head()
pcbilDataRaw <- read.csv(file = "C:/Users/jmalt/Desktop/tfcb_captsone/data/pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" ) %>%
print[1:5]
pcbilDataRaw <- read.csv(file = "C:/Users/jmalt/Desktop/tfcb_captsone/data/pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" ) %>%
print(:5)
pcbilDataRaw <- read.csv(file = "C:/Users/jmalt/Desktop/tfcb_captsone/data/pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" ) %>%
print([1:5])
pcbilDataRaw <- read.csv(file = "C:/Users/jmalt/Desktop/tfcb_captsone/data/pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" ) %>%
print()
pcbilDataRaw <- read.csv(file = "C:/Users/jmalt/Desktop/tfcb_captsone/data/pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" )
pcbilDataRaw <- read.csv(file = "C:/Users/jmalt/Desktop/tfcb_captsone/data/pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" )
# create working dataset for processing
pcbilDataWork <- pcbilDataRaw
# process column names
names(pcbilDataWork) <- tolower(names(pcbilDataWork))
names(pcbilDataWork)[39] <- "clin_diag"
pcbilDataWork$clin_diag <- as.factor(pcbilDataWork$clin_diag)
revalue(pcbilDataWork$clin_diag, c("Ampulla Ac" = "Ampullary carcinoma")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Distal Bile Duct Ac" = "Distal bile duct cancer")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Gallbladder Ac" = "Gallbladder cancer")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Hepatocellular Cancer" = "Hepatocellular carcinoma")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Intrahepatic Cholangiocarcinoma" = "Intrahepatic cholangiocarcinoma")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Pancreas Ac" = "Ductal pancreatic adenocarcinoma")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Perihilary Ac" = "Perihilar cholangiocarcinoma")) -> pcbilDataWork$clin_diag
#Total number of tumor samples
dim(pcbilDataWork)[1]
#Total number of markers
dim(pcbilDataWork)[2]
#List of markers
names(pcbilDataWork)
pcbilDataWork[rownames(pcbilDataWork) == "Intrahepatic Cholangiocarcinoma|366" , "clin_diag"] <- "Gallbladder cancer"
# first, as they do in the paper, fix one incorrect anatomical-based diagnosis:
pcbilDataWork[rownames(pcbilDataWork) == "Intrahepatic Cholangiocarcinoma|366" , "clin_diag"] <- "Gallbladder cancer"
# then look at the table:
table(pcbilDataWork$clin_diag)
propmiss <- function(dataframe) {
m <- sapply(dataframe, function(x) {
data.frame(
nmiss=sum(is.na(x)),
n=length(x),
propmiss=round(sum(is.na(x))/length(x),2)
)
})
d <- data.frame(t(m))
d <- sapply(d, unlist)
d <- as.data.frame(d)
d$variable <- row.names(d)
row.names(d) <- NULL
d <- cbind(d[ncol(d)],d[-ncol(d)])
return(d[order(d$propmiss), ])
}
reportmiss <- function(dataframe) {
propMiss <- propmiss(dataframe)
print(propMiss)
totalNumValues <- dim(dataframe)[1] * (dim(dataframe)[2] - 1)
totalMissingValues <- sum(propMiss$nmiss)
return ( (100 / totalNumValues) * totalMissingValues  )
}
pcbilDataWorkMissingValues <- reportmiss(pcbilDataWork)
#Total percentage of missing data in processed dataset (%):
round(pcbilDataWorkMissingValues, 0)
reportmissperrow <- function(dataframe) {
pads <- c()
numMissingValues <- c()
propMissingValues <- c()
aRow <- 1
while(aRow <= nrow(dataframe)) {
pads <- c(pads, row.names(dataframe)[aRow])
numMissing <- sum(is.na(dataframe[aRow,]))
propMissingValues <- c(propMissingValues, round((100 / (dim(dataframe)[2] -1)) *numMissing,2))
numMissingValues <- c(numMissingValues, numMissing)
aRow <- aRow + 1
}
missingD <- data.frame(pad = pads, nmissing = numMissingValues, propmissing = propMissingValues, stringsAsFactors=F)
missingD$propmiss_interv <- cut(missingD$propmissing, c(0,10,20,30,40,50,60,70,80,90,100))
print(table(missingD$propmiss_interv))
return (subset(missingD, propmissing > 50)[, 1])
}
numCasesMissGreat50 <- reportmissperrow(pcbilDataWork)
#Number of cases in work dataset with more than 50% missing data:
length(numCasesMissGreat50)
pcbilDataMarkerTrimmed <- subset(pcbilDataWork, select=-c(ttf1, cd146, cd146_nucl, ngfr_str, calretinin, glypican_3, ezh2, synap, hbme1, mesothelin, hepatocyte))
pcbilDataMarkerTrimmedMissingValues <- reportmiss(pcbilDataMarkerTrimmed)
#Total percentage missing data in dataset after trimming of markers: (%)
round(pcbilDataMarkerTrimmedMissingValues, 0)
missmap(pcbilDataMarkerTrimmed)
pcbilDataMarkerTrimmedMissingValues <- reportmiss(pcbilDataMarkerTrimmed)
#Total percentage missing data in dataset after trimming of markers: (%)
pcbilDataMarkerTrimmed <- subset(pcbilDataWork, select=-c(ttf1, cd146, cd146_nucl, ngfr_str, calretinin, glypican_3, ezh2, synap, hbme1, mesothelin, hepatocyte))
pcbilDataMarkerTrimmedMissingValues <- reportmiss(pcbilDataMarkerTrimmed)
samplesWithMissingGreater50 <- reportmissperrow(pcbilDataMarkerTrimmed)
#Number of cases in filtered dataset with more than 50% missing data:
length(samplesWithMissingGreater50)
print(samplesWithMissingGreater50)
pcbilDataMarkerSamplesTrimmed <- pcbilDataMarkerTrimmed[!rownames(pcbilDataMarkerTrimmed) %in% samplesWithMissingGreater50, ]
pcbilDataMarkerSamplesTrimmed <- pcbilDataMarkerTrimmed[!rownames(pcbilDataMarkerTrimmed) %in% samplesWithMissingGreater50, ]
pcbilDataMarkerTrimmedMissingValues <- reportmiss(pcbilDataMarkerSamplesTrimmed)
pcbilMatrixImputed <- impute.knn(as.matrix(pcbilDataMarkerSamplesTrimmed[1:27]))
pcbilDataImputed <- as.data.frame(pcbilMatrixImputed$data)
pcbilDataImputed$clin_diag <- pcbilDataMarkerSamplesTrimmed$clin_diag
pcbilMatrixImputed <- impute.knn(as.matrix(pcbilDataMarkerSamplesTrimmed[1:27]))
pcbilDataImputed <- as.data.frame(pcbilMatrixImputed$data)
pcbilDataImputed$clin_diag <- pcbilDataMarkerSamplesTrimmed$clin_diag
# check the result:
pcbilDataImputedMissingValues <-reportmiss(pcbilDataImputed)
pcbilDataImputed$pad <- rownames(pcbilDataImputed)
write.csv(pcbilDataImputed, '/data/pcbilDataImputed.csv', row.names=F, na="")
pcbilDataImputed$pad <- rownames(pcbilDataImputed)
write.csv(pcbilDataImputed, 'data/pcbilDataImputed.csv', row.names=F, na="")
library(plyr)
#library(Amelia)
library(impute)
library(tidyverse)
BiocManager::install("impute")
pcbilDataRaw <- read.csv(file = "C:/Users/jmalt/Desktop/tfcb_captsone/data/pcbil_raw.csv", row.names = 39, colClasses= c(rep("numeric",38), rep("character",2)), na.strings = "?",quote="'" )
# create working dataset for processing
pcbilDataWork <- pcbilDataRaw
# process column names
names(pcbilDataWork) <- tolower(names(pcbilDataWork))
names(pcbilDataWork)[39] <- "clin_diag"
pcbilDataWork$clin_diag <- as.factor(pcbilDataWork$clin_diag)
revalue(pcbilDataWork$clin_diag, c("Ampulla Ac" = "Ampullary carcinoma")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Distal Bile Duct Ac" = "Distal bile duct cancer")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Gallbladder Ac" = "Gallbladder cancer")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Hepatocellular Cancer" = "Hepatocellular carcinoma")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Intrahepatic Cholangiocarcinoma" = "Intrahepatic cholangiocarcinoma")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Pancreas Ac" = "Ductal pancreatic adenocarcinoma")) -> pcbilDataWork$clin_diag
revalue(pcbilDataWork$clin_diag, c("Perihilary Ac" = "Perihilar cholangiocarcinoma")) -> pcbilDataWork$clin_diag
#Total number of tumor samples
dim(pcbilDataWork)[1]
#Total number of markers
dim(pcbilDataWork)[2]
#List of markers
names(pcbilDataWork)
# first, as they do in the paper, fix one incorrect anatomical-based diagnosis:
pcbilDataWork[rownames(pcbilDataWork) == "Intrahepatic Cholangiocarcinoma|366" , "clin_diag"] <- "Gallbladder cancer"
# then look at the table:
table(pcbilDataWork$clin_diag)
propmiss <- function(dataframe) {
m <- sapply(dataframe, function(x) {
data.frame(
nmiss=sum(is.na(x)),
n=length(x),
propmiss=round(sum(is.na(x))/length(x),2)
)
})
d <- data.frame(t(m))
d <- sapply(d, unlist)
d <- as.data.frame(d)
d$variable <- row.names(d)
row.names(d) <- NULL
d <- cbind(d[ncol(d)],d[-ncol(d)])
return(d[order(d$propmiss), ])
}
reportmiss <- function(dataframe) {
propMiss <- propmiss(dataframe)
print(propMiss)
totalNumValues <- dim(dataframe)[1] * (dim(dataframe)[2] - 1)
totalMissingValues <- sum(propMiss$nmiss)
return ( (100 / totalNumValues) * totalMissingValues  )
}
pcbilDataWorkMissingValues <- reportmiss(pcbilDataWork)
#Total percentage of missing data in processed dataset (%):
round(pcbilDataWorkMissingValues, 0)
reportmissperrow <- function(dataframe) {
pads <- c()
numMissingValues <- c()
propMissingValues <- c()
aRow <- 1
while(aRow <= nrow(dataframe)) {
pads <- c(pads, row.names(dataframe)[aRow])
numMissing <- sum(is.na(dataframe[aRow,]))
propMissingValues <- c(propMissingValues, round((100 / (dim(dataframe)[2] -1)) *numMissing,2))
numMissingValues <- c(numMissingValues, numMissing)
aRow <- aRow + 1
}
missingD <- data.frame(pad = pads, nmissing = numMissingValues, propmissing = propMissingValues, stringsAsFactors=F)
missingD$propmiss_interv <- cut(missingD$propmissing, c(0,10,20,30,40,50,60,70,80,90,100))
print(table(missingD$propmiss_interv))
return (subset(missingD, propmissing > 50)[, 1])
}
numCasesMissGreat50 <- reportmissperrow(pcbilDataWork)
#Number of cases in work dataset with more than 50% missing data:
length(numCasesMissGreat50)
pcbilDataMarkerTrimmed <- subset(pcbilDataWork, select=-c(ttf1, cd146, cd146_nucl, ngfr_str, calretinin, glypican_3, ezh2, synap, hbme1, mesothelin, hepatocyte))
pcbilDataMarkerTrimmedMissingValues <- reportmiss(pcbilDataMarkerTrimmed)
samplesWithMissingGreater50 <- reportmissperrow(pcbilDataMarkerTrimmed)
#Number of cases in filtered dataset with more than 50% missing data:
length(samplesWithMissingGreater50)
print(samplesWithMissingGreater50)
pcbilDataMarkerSamplesTrimmed <- pcbilDataMarkerTrimmed[!rownames(pcbilDataMarkerTrimmed) %in% samplesWithMissingGreater50, ]
pcbilDataMarkerTrimmedMissingValues <- reportmiss(pcbilDataMarkerSamplesTrimmed)
reportmissperrow(pcbilDataMarkerSamplesTrimmed)
pcbilMatrixImputed <- impute.knn(as.matrix(pcbilDataMarkerSamplesTrimmed[1:27]))
pcbilDataImputed <- as.data.frame(pcbilMatrixImputed$data)
pcbilDataImputed$clin_diag <- pcbilDataMarkerSamplesTrimmed$clin_diag
# check the result:
pcbilDataImputedMissingValues <-reportmiss(pcbilDataImputed)
pcbilDataImputed$pad <- rownames(pcbilDataImputed)
write.csv(pcbilDataImputed, 'data/pcbilDataImputed.csv', row.names=F, na="")
library(plyr)
library(impute)
library(tidyverse)
BiocManager::install("impute")
